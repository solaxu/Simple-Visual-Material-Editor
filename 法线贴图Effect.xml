<Material>
    <Textures>
        <NormalTex>G:\MyProject\ShaderEditor\NormalMap.dds</NormalTex>
        <ColorTex>G:\MyProject\ShaderEditor\ColorMap.jpg</ColorTex>
    </Textures>
    <Matrix>
        <WorldMat />
        <WVPMat />
    </Matrix>
    <Effect>float4x4 WorldMat;&#x0A;&#x0A;float3 eyePos = float3(-46.000f, 0.000f, -28.000f);&#x0A;float3 lightPos = float3(-20.000f, 0.000f, 0.000f);&#x0A;float4x4 WVPMat;&#x0A;float3 ViewDir(float4x4 worldMat, float4 pos, float3 direc)&#x0A;{&#x0A;&#x09;float3x3 worldToTangentSpace;&#x0A;&#x09;&#x0A;&#x09;float3 _tangent = float3(1.0f,0.0f,0.0f);&#x0A;&#x09;float3 _normal = float3(0.0f,0.0f,-1.0f);&#x0A;&#x09;&#x0A;&#x09;worldToTangentSpace[0] = mul(_tangent, worldMat);&#x0A;&#x09;worldToTangentSpace[1] = mul(cross(_tangent, _normal), worldMat);&#x0A;&#x09;worldToTangentSpace[2] = mul(_normal, worldMat);&#x0A;&#x09;&#x0A;&#x09;float3 posworld = normalize(mul(pos,worldMat));&#x0A;&#x09;&#x0A;&#x09;float3 light = normalize(direc) - posworld;&#x0A;&#x09;&#x0A;&#x09;return mul(light, worldToTangentSpace);&#x0A;}float3 LightDir(float4x4 worldMat, float4 pos, float3 direc)&#x0A;{&#x0A;&#x09;float3x3 worldToTangentSpace;&#x0A;&#x09;&#x0A;&#x09;float3 _tangent = float3(1.0f,0.0f,0.0f);&#x0A;&#x09;float3 _normal = float3(0.0f,0.0f,-1.0f);&#x0A;&#x09;&#x0A;&#x09;worldToTangentSpace[0] = mul(_tangent, worldMat);&#x0A;&#x09;worldToTangentSpace[1] = mul(cross(_tangent, _normal), worldMat);&#x0A;&#x09;worldToTangentSpace[2] = mul(_normal, worldMat);&#x0A;&#x09;&#x0A;&#x09;float3 posworld = normalize(mul(pos,worldMat));&#x0A;&#x09;&#x0A;&#x09;float3 light = normalize(direc) - posworld;&#x0A;&#x09;&#x0A;&#x09;return mul(light, worldToTangentSpace);&#x0A;}&#x0A;struct VS_OUTPUT {&#x0A;float4 pos : POSITION;&#x0A;float2 tex : TEXCOORD0;&#x0A;float3 view : TEXCOORD1;&#x0A;float3 light : TEXCOORD2;&#x0A;};&#x0A;&#x0A;struct VS_INPUT {&#x0A;float4 pos : POSITION;&#x0A;float2 tex : TEXCOORD0;&#x0A;};&#x0A;&#x0A;VS_OUTPUT VS_Main(VS_INPUT In)&#x0A;{&#x0A;VS_OUTPUT Out = (VS_OUTPUT)0;&#x0A;&#x0A;float3 VIEWDIR = ViewDir(WorldMat,In.pos,eyePos.xyz);&#x0A;float3 LIGHTDIR = LightDir(WorldMat,In.pos,lightPos.xyz);&#x0A;float4 clipPos = mul(In.pos,WVPMat);&#x0A;Out.tex = In.tex;&#x0A;Out.view = VIEWDIR;&#x0A;Out.light = LIGHTDIR;&#x0A;Out.pos = clipPos;&#x0A;&#x0A;return Out;&#x0A;}&#x0A;&#x0A;&#x0A;float4 NormalSpecular(float4 nor, float4 col, float3 view, float3 light)&#x0A;{&#x0A;float fScaleDistance = 5.0f / length( light );&#x0A;&#x0A;float3 vNormalInTexture =  normalize( 2 * nor.xyz - 1.0 );&#x0A;&#x0A;float3 lightDir = normalize(light);&#x0A;&#x0A;float3 viewDir = normalize(view);&#x0A;&#x0A;float4 diff = saturate(dot(vNormalInTexture, lightDir));&#x0A;&#x0A;float selfShadow = saturate(4 * diff);&#x0A;&#x0A;float3 Reflect = normalize(2 * diff * vNormalInTexture - lightDir);&#x0A;&#x0A;float4 specular = min(pow(saturate(dot(Reflect, viewDir)), 15), col.a);&#x0A;&#x0A;return 0.5 * col + selfShadow * (col * diff + specular);&#x0A;}texture NormalTexTex;&#x0A;&#x0A;sampler SamplerNormalTex = sampler_state&#x0A;{&#x0A;Texture = NormalTexTex;&#x0A;AddressU = WRAP;&#x0A;AddressV = WRAP;&#x0A;AddressW = WRAP;&#x0A;MipFilter = LINEAR;&#x0A;MinFilter = LINEAR;&#x0A;MagFilter = LINEAR;&#x0A;};&#x0A;texture ColorTexTex;&#x0A;&#x0A;sampler SamplerColorTex = sampler_state&#x0A;{&#x0A;Texture = ColorTexTex;&#x0A;AddressU = WRAP;&#x0A;AddressV = WRAP;&#x0A;AddressW = WRAP;&#x0A;MipFilter = NONE;&#x0A;MinFilter = NONE;&#x0A;MagFilter = NONE;&#x0A;};&#x0A;&#x0A;struct PS_OUTPUT {&#x0A;float4 col : COLOR;&#x0A;};&#x0A;&#x0A;struct PS_INPUT {&#x0A;float4 pos : POSITION;&#x0A;float2 tex : TEXCOORD0;&#x0A;float3 view : TEXCOORD1;&#x0A;float3 light : TEXCOORD2;&#x0A;};&#x0A;&#x0A;PS_OUTPUT PS_Main(PS_INPUT In) : COLOR&#x0A;{&#x0A;PS_OUTPUT Out = (PS_OUTPUT)0;&#x0A;&#x0A;float4 NormalTex = tex2D(SamplerNormalTex, In.tex);&#x0A;float4 ColorTex = tex2D(SamplerColorTex, In.tex);&#x0A;float4 finalColor = NormalSpecular(NormalTex.rgba,ColorTex.rgba,In.view,In.light);&#x0A;Out.col = finalColor;&#x0A;&#x0A;return Out;&#x0A;}&#x0A;&#x0A;technique DefaultTech &#x0A;{&#x0A;pass P0&#x0A;{&#x0A; VertexShader = compile vs_3_0 VS_Main();&#x0A; PixelShader = compile ps_3_0 PS_Main();&#x0A;}&#x0A;}&#x0A;</Effect>
</Material>
